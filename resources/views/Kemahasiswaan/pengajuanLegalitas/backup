<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Membuka File PDF Lokal</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <style>
        .textbox {
            position: absolute;
            border: 1px solid #000;
            background-color: transparent;
            padding: 5px;
            resize: both;
            overflow: auto;
            min-width: 50px;
            min-height: 30px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            cursor: text;
        }

        .draggable-image {
            position: absolute;
            max-width: 100px;
            cursor: move;
        }

        .resizer {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: white;
            border: 1px solid black;
            cursor: pointer;
        }

        .resizer.active {
            background-color: #4CAF50;
        }
    </style>
</head>

<body class="bg-gray-100 p-4">

    <!-- Tambahkan tombol untuk mengaktifkan/menonaktifkan mode mencoret -->
    <button id="toggle-draw" class="bg-blue-500 text-white px-4 py-2 rounded">Aktifkan Coretan</button>
    <button id="add-textbox" class="bg-green-500 text-white px-4 py-2 rounded">Tambahkan Textbox</button>
    <input type="file" id="upload-image" class="hidden" accept="image/*">
    <button id="add-image" class="bg-red-500 text-white px-4 py-2 rounded">Tambahkan Gambar</button>
    <button id="download-pdf" class="bg-red-500 text-white px-4 py-2 rounded">Download PDF</button>

    <div id="pdf-viewer" class="relative mt-4"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="{{ asset('pdfjs/build/pdf.mjs') }}" type="module"></script>
    <script type="module">
        var { pdfjsLib } = globalThis;

        // Atur path ke direktori PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = "{{ asset('pdfjs/build/pdf.worker.mjs') }}";

        async function displayPDF() {
            const pdfPath = "{{ asset('example.pdf') }}"; // Ganti dengan path ke file PDF Anda

            try {
                const pdf = await pdfjsLib.getDocument(pdfPath).promise;
                const totalPages = pdf.numPages;

                // Dapatkan konteks canvas
                const canvasContainer = document.getElementById('pdf-viewer');
                const toggleDrawButton = document.getElementById('toggle-draw');
                const addTextboxButton = document.getElementById('add-textbox');
                const addImageButton = document.getElementById('add-image');
                const uploadImageInput = document.getElementById('upload-image');
                const downloadPdfButton = document.getElementById('download-pdf');

                // Buat variabel untuk menyimpan data coretan dan textbox
                const annotations = [];
                let isDrawing = false;

                // Inisialisasi event listener untuk menggambar coretan
                let lastX = 0;
                let lastY = 0;

                toggleDrawButton.addEventListener('click', () => {
                    isDrawing = !isDrawing; // Mengubah status mode mencoret
                    toggleDrawButton.textContent = isDrawing ? 'Nonaktifkan Coretan' : 'Aktifkan Coretan';
                });

                canvasContainer.addEventListener('mousedown', (e) => {
                    if (isDrawing) {
                        [lastX, lastY] = [e.offsetX, e.offsetY];
                    }
                });

                canvasContainer.addEventListener('mousemove', (e) => {
                    if (!isDrawing) return;
                    if (!e.buttons) return; // Coretan hanya dibuat saat tombol mouse ditekan
                    const canvas = e.target;
                    const context = canvas.getContext('2d');

                    // Gambar garis coretan
                    context.beginPath();
                    context.moveTo(lastX, lastY);
                    context.lineTo(e.offsetX, e.offsetY);
                    context.strokeStyle = 'red';
                    context.lineWidth = 2;
                    context.stroke();

                    // Simpan data coretan
                    annotations.push({
                        type: 'line',
                        startX: lastX,
                        startY: lastY,
                        endX: e.offsetX,
                        endY: e.offsetY,
                        color: 'red',
                        lineWidth: 2,
                        page: canvas.dataset.pageNumber
                    });

                    [lastX, lastY] = [e.offsetX, e.offsetY];
                });

                const canvases = [];

                // Iterasi untuk setiap halaman
                for (let pageNumber = 1; pageNumber <= totalPages; pageNumber++) {
                    const page = await pdf.getPage(pageNumber);
                    const scale = 1.0;  // Kurangi skala untuk mengurangi ukuran gambar
                    const viewport = page.getViewport({ scale });

                    // Buat canvas untuk halaman
                    const canvas = document.createElement('canvas');
                    canvas.className = 'pdf-page w-full';
                    canvas.width = viewport.width;
                    canvas.height = viewport.height;
                    canvas.dataset.pageNumber = pageNumber;
                    canvasContainer.appendChild(canvas);
                    canvases.push(canvas);

                    // Render PDF ke canvas
                    const context = canvas.getContext('2d');
                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    await page.render(renderContext).promise;
                }

                addTextboxButton.addEventListener('click', () => {
                    const textbox = document.createElement('div');
                    textbox.contentEditable = "true"; // Set contentEditable to true
                    textbox.className = 'textbox';
                    textbox.style.left = '10px';
                    textbox.style.top = '10px';
                    textbox.textContent = 'Tulis sesuatu...';

                    // Simpan referensi halaman untuk textbox ini
                    const currentPage = canvases.findIndex(canvas => canvas.getBoundingClientRect().top >= window.scrollY);
                    textbox.dataset.pageNumber = currentPage + 1;

                    canvasContainer.appendChild(textbox);
                    textbox.focus(); // Fokuskan pada textbox agar bisa langsung diketik
                    dragElement(textbox);
                });

                addImageButton.addEventListener('click', () => {
                    uploadImageInput.click();
                });

                uploadImageInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const img = new Image();
                            img.src = e.target.result;
                            img.className = 'draggable-image';
                            img.style.left = '10px';
                            img.style.top = '10px';

                            // Simpan referensi halaman untuk gambar ini
                            const currentPage = canvases.findIndex(canvas => canvas.getBoundingClientRect().top >= window.scrollY);
                            img.dataset.pageNumber = currentPage + 1;

                            canvasContainer.appendChild(img);
                            dragElement(img);
                        };
                        reader.readAsDataURL(file);
                    }
                });

                // Tambahkan event listener untuk resize gambar di luar event listener untuk menambahkan gambar
                // Tambahkan event listener untuk resize gambar di luar event listener untuk menambahkan gambar
                // Tambahkan event listener untuk resize gambar di luar event listener untuk menambahkan gambar
                // Tambahkan event listener untuk resize gambar di luar event listener untuk menambahkan gambar
                document.addEventListener('mousedown', function (e) {
                    const target = e.target;
                    if (target && target.classList.contains('draggable-image')) {
                        e.preventDefault();
                        const rect = target.getBoundingClientRect();
                        const offsetX = e.clientX - rect.left;
                        const offsetY = e.clientY - rect.top;
                        let prevX = e.clientX;
                        let prevY = e.clientY;
                        let prevWidth = target.offsetWidth;
                        let prevHeight = target.offsetHeight;
                        document.onmousemove = resize;
                        document.onmouseup = stopResize;

                        function resize(e) {
                            const dx = e.clientX - prevX;
                            const dy = e.clientY - prevY;

                            // Perbarui ukuran gambar
                            target.style.width = prevWidth + dx + 'px';
                            target.style.height = prevHeight + dy + 'px';

                            // Perbarui posisi gambar agar tetap di tempatnya saat diresize
                            target.style.left = (parseInt(target.style.left) + dx) + 'px';
                            target.style.top = (parseInt(target.style.top) + dy) + 'px';

                            prevX = e.clientX;
                            prevY = e.clientY;
                            prevWidth = target.offsetWidth;
                            prevHeight = target.offsetHeight;
                        }

                        function stopResize() {
                            document.onmousemove = null;
                            document.onmouseup = null;
                        }
                    }
                });

                downloadPdfButton.addEventListener('click', () => {
                    const { jsPDF } = window.jspdf;
                    const pdf = new jsPDF();

                    canvases.forEach((canvas, index) => {
                        if (index > 0) pdf.addPage();
                        const imgData = canvas.toDataURL('image/jpeg', 0.8); // Gunakan format JPEG dengan kualitas 0.8
                        pdf.addImage(imgData, 'JPEG', 0, 0, pdf.internal.pageSize.getWidth(), pdf.internal.pageSize.getHeight());

                        // Add textbox contents to the PDF for this page only
                        document.querySelectorAll(`.textbox[data-page-number="${index + 1}"]`).forEach((textbox) => {
                            const text = textbox.textContent;
                            const style = window.getComputedStyle(textbox);
                            const left = parseInt(style.left) / (canvas.width / pdf.internal.pageSize.getWidth());
                            const top = (parseInt(style.top) / (canvas.height / pdf.internal.pageSize.getHeight())) + pdf.internal.getFontSize();

                            pdf.setFontSize(parseInt(style.fontSize));
                            pdf.text(text, left, top);
                        });

                        // Add images to the PDF for this page only
                        document.querySelectorAll(`.draggable-image[data-page-number="${index + 1}"]`).forEach((image) => {
                            const style = window.getComputedStyle(image);
                            const left = parseInt(style.left) / (canvas.width / pdf.internal.pageSize.getWidth());
                            const top = parseInt(style.top) / (canvas.height / pdf.internal.pageSize.getHeight());
                            const imgWidth = image.width / (canvas.width / pdf.internal.pageSize.getWidth());
                            const imgHeight = image.height / (canvas.height / pdf.internal.pageSize.getHeight());

                            pdf.addImage(image.src, 'JPEG', left, top, imgWidth, imgHeight);
                        });
                    });

                    pdf.save('annotated.pdf');
                });

                function dragElement(el) {
                    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
                    el.onmousedown = dragMouseDown;

                    function dragMouseDown(e) {
                        e = e || window.event;
                        e.preventDefault();
                        pos3 = e.clientX;
                        pos4 = e.clientY;
                        document.onmouseup = closeDragElement;
                        document.onmousemove = elementDrag;
                    }

                    function elementDrag(e) {
                        e = e || window.event;
                        e.preventDefault();
                        pos1 = pos3 - e.clientX;
                        pos2 = pos4 - e.clientY;
                        pos3 = e.clientX;
                        pos4 = e.clientY;
                        el.style.top = (el.offsetTop - pos2) + "px";
                        el.style.left = (el.offsetLeft - pos1) + "px";
                    }

                    function closeDragElement() {
                        document.onmouseup = null;
                        document.onmousemove = null;
                    }
                }
            } catch (error) {
                console.error('Error rendering PDF:', error);
            }
        }

        displayPDF();
    </script>

</body>

</html>
